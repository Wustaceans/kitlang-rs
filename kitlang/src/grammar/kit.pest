WHITESPACE = _{ " " | "\t" | NEWLINE }
NEWLINE = _{ "\n" | "\r\n" }

program = _{ SOI ~ (import | include | function)* ~ EOI }

import = { "import" ~ path ~ ";" }
include = { "include" ~ string ~ ";" }
path = @{ identifier ~ ("." ~ identifier)* ~ ("." ~ ("*" | "**"))? }

function = {
    "function" ~ identifier ~ "(" ~ params? ~ ")" ~ (":" ~ type_annotation)? ~ block
}

params = { param ~ ("," ~ param)* }
param = { identifier ~ ":" ~ type_annotation }

type_annotation = { identifier ~ ("[" ~ type_annotation ~ ("," ~ type_annotation)* ~ "]")? }

block = { "{" ~ (statement)* ~ "}" }

statement = {
    var_decl |
    expr_stmt |
    return_stmt
}

var_decl = { ("var" | "const") ~ identifier ~ (":" ~ type_annotation)? ~ ("=" ~ expr)? ~ ";" }

expr_stmt = { expr ~ ";" }

return_stmt = { "return" ~ expr? ~ ";" }

expr = { assign }
assign = { logical_or ~ ("=" ~ assign)? }
logical_or = { logical_and ~ ("||" ~ logical_and)* }
logical_and = { equality ~ ("&&" ~ equality)* }
equality = { comparison ~ (("==" | "!=") ~ comparison)* }
comparison = { additive ~ (("<" | ">" | "<=" | ">=") ~ additive)* }
additive = { multiplicative ~ (("+" | "-") ~ multiplicative)* }
multiplicative = { unary ~ (("*" | "/" | "%") ~ unary)* }
unary = { ("!" | "-" | "&" | "*")* ~ primary }
primary = {
    function_call |
    identifier |
    literal |
    "(" ~ expr ~ ")" |
    string
}

function_call = { identifier ~ "(" ~ (expr ~ ("," ~ expr)*)? ~ ")" }

literal = { number | boolean | "null" }
float = @{ ("-"? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+) }
number = @{ ("-"? ~ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? ) }
boolean = { "true" | "false" }

string = @{ "\"" ~ ( "\\\"" | !"\"" ~ ANY )* ~ "\"" }

identifier = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }
